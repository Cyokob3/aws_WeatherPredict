# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WSjEygOybrtIpHiin48hGfwDjRp72ahB
"""

import pandas as pd
import numpy as np
import pickle
import sys
import warnings

from sklearn.linear_model import LogisticRegression as LR
from sklearn.model_selection import train_test_split


warnings.resetwarnings()
warnings.simplefilter('ignore', UserWarning)

def train():

    f = open ("気象データ.csv", encoding="CP932")

    data = pd.read_csv(f)

    #天気情報を2値分類
    for i in range(len(data)):
      if data.loc[i,"天気"] == 1 or data.loc[i,"天気"] == 2:
        data.loc[i,"天気"] = 0
      elif data.loc[i,"天気"] == 3 or data.loc[i,"天気"] == 4:
        data.loc[i,"天気"] = 1

    X_data = data[['気温(℃)','現地気圧(hPa)','相対湿度(％)']]
    Y_data = data['天気']

    X_train, X_test, y_train, y_test = train_test_split(X_data, Y_data, test_size = 0.2)
    clf = LR()
    clf.fit(X_train.values, y_train)

    with open('model.pickle', mode='wb') as f:
      pickle.dump(clf,f,protocol=2)

    clf.predict(X_test)
    clf.score(X_test, y_test)

def decode(temperature, humidity, atmospheric_pressure):


    with open('model.pickle', mode='rb') as f:
      clf = pickle.load(f)



    weather = [[float(temperature), float(atmospheric_pressure), float(humidity)]]  
    
    ans = clf.predict(weather)

    print(ans)


if __name__ == "__main__":

  args = sys.argv
  if len(args) > 2:
    if args[1] == 'train':
      train()
    else:
      decode(args[1], args[2], args[3])
  else:
    print('Arguments are too short')